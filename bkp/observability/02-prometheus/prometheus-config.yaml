apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: go-service-obs
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'go-service-cluster'

    rule_files:
    - "/etc/prometheus/rules/*.yml"

    scrape_configs:
    # OpenTelemetry Collector metrics
    - job_name: 'otel-collector'
      static_configs:
      - targets: ['otel-collector.go-service-obs.svc.cluster.local:8889']
      scrape_interval: 15s
      metrics_path: /metrics

    # Direct scraping of Go microservice (backup)
    - job_name: 'go-microservice-direct'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - go-service-obs
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod_name

    # Istio service mesh metrics
    - job_name: 'istio-mesh'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system
          - go-service-obs
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istio-proxy;http-monitoring

  alerting-rules.yml: |
    groups:
    - name: go-microservice-alerts
      rules:
      - alert: GoServiceHighErrorRate
        expr: |
          (
            sum(rate(http_requests_total{job=~".*go-microservice.*",status=~"5.."}[5m])) /
            sum(rate(http_requests_total{job=~".*go-microservice.*"}[5m]))
          ) * 100 > 5
        for: 2m
        labels:
          severity: critical
          service: go-microservice
        annotations:
          summary: "Go Microservice high error rate"
          description: "Error rate is {{ $value }}% for the last 5 minutes"

      - alert: GoServiceHighLatency
        expr: |
          histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=~".*go-microservice.*"}[5m])) by (le)) > 1
        for: 5m
        labels:
          severity: warning
          service: go-microservice
        annotations:
          summary: "Go Microservice high latency"
          description: "95th percentile latency is {{ $value }}s"

      - alert: GoServiceDown
        expr: up{job=~".*go-microservice.*"} == 0
        for: 1m
        labels:
          severity: critical
          service: go-microservice
        annotations:
          summary: "Go Microservice is down"
          description: "Go Microservice has been down for more than 1 minute"

      - alert: GoServiceLowThroughput
        expr: |
          sum(rate(http_requests_total{job=~".*go-microservice.*"}[5m])) < 0.1
        for: 10m
        labels:
          severity: warning
          service: go-microservice
        annotations:
          summary: "Go Microservice low throughput"
          description: "Request rate is {{ $value }} requests/second"